% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/voronoi.R
\name{voronoi}
\alias{voronoi}
\title{Voronoi diagram}
\usage{
voronoi(points = NULL, delaunay = FALSE)
}
\arguments{
\item{points}{a \eqn{n}-by-\eqn{d} dataframe or matrix. The rows
represent \eqn{n} points and the \eqn{d} columns the coordinates in 
\eqn{d}-dimensional space.}

\item{delaunay}{a boolean indicating if the Delaunay triangulation, which is 
the dual of the Voronoi diagram should also be returned, defaults to 
\code{FALSE}.}
}
\value{
Returns a list consisting of:

\itemize{
  \item \code{input_points}: the input points used to create the Voronoi 
  diagram.
  \item \code{voronoi_vertices}: a \eqn{i}-by-\eqn{d} matrix of point 
  coordinates that define the verticies that make each Voronoi region \eqn{v}.
  \item \code{voronoi_regions}: a list of length \eqn{p} that for each input 
  point contains indicies for the Voronoi vertices that define the Voronoi 
  region \eqn{v} for each input point - if the indicies include zeros then 
  the Voronoi region is infinite.
}

Additionally, if \code{delaunay = TRUE} the returned list also inclues:

\itemize{
  \item \code{simplices}: a \eqn{s}-by-\eqn{d+1} matrix of point indices 
  that define the \eqn{s} \href{https://en.wikipedia.org/wiki/Simplex}{simplices} 
  that make up the Delaunay triangulation.
  \item \code{circumradii}: for each simplex the radius of the associated 
  \href{https://en.wikipedia.org/wiki/Circumscribed_circle}{circumcircle} 
  (note: the \code{voronoi_vertices} are equivalent to the the centres of the 
  circumcircles).
  \item \code{simplex_neighs}: a list containing for each simplex the 
  neighbouring simplices.
}
}
\description{
This function calculates the 
\href{https://en.wikipedia.org/wiki/Voronoi_diagram}{Voronoi digram} of a set
of \eqn{n} points in \eqn{d}-dimensional space using the
\href{http://www.qhull.org}{Qhull} library.
}
\examples{
# Define points
x <- c(30, 70, 20, 50, 40, 70, 20, 55, 30)
y <- c(35, 80, 70, 50, 60, 20, 20, 55, 65)
p <- data.frame(x, y)
# Create Voronoi diagram and plot
vd <- voronoi(points = p)
cols = c("red", "blue", "green", "darkgrey", "purple", "lightseagreen",
         "brown", "darkgreen", "orange")
plot(vd$input_points, pch = as.character(seq(nrow(p))), col=cols,
     xlim=c(0,100), ylim=c(0,100))
text(vd$voronoi_vertices[,1], vd$voronoi_vertices[,2], 
     labels = as.character(seq(nrow(vd$voronoi_vertices))))
r = 0
for (vd_region in vd$voronoi_regions) {
  r = r + 1
  if (!0 \%in\% vd_region) {
    polygon(vd$voronoi_vertices[vd_region,], density=20, col = cols[r])
  }
}

}
\references{
Barber CB, Dobkin DP, Huhdanpaa H (1996) The Quickhull algorithm 
for convex hulls. ACM Transactions on Mathematical Software, 22(4):469-83 
\url{https://doi.org/10.1145/235815.235821}.
}
\seealso{
\code{\link{delaunay}}
}
